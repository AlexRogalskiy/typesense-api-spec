{
  "swagger": "2.0",
  "info": {
    "description": "An open source search engine for building delightful search experiences. ",
    "version": "0.8.0-draft",
    "title": "Typesense API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "contact@wreally.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://tldrlegal.com/license/mit-license"
    }
  },
  "host": "localhost:8108",
  "basePath": "/",
  "tags": [
    {
      "name": "collections",
      "description": "A collection is defined by a schema",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://wreally.com/typesense-docs-0.7/#create-a-collection"
      }
    },
    {
      "name": "documents",
      "description": "A document is an individual record to be indexed and belongs to a collection",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://wreally.com/typesense-docs-0.7/#index-a-document"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/collections": {
      "post": {
        "tags": [
          "collections"
        ],
        "summary": "Create a new collection",
        "description": "When a collection is created, we give it a name and describe the fields that will be indexed from the documents added to the collection.",
        "operationId": "createCollection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "collection",
            "description": "The collection object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Collection successfully created",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "409": {
            "description": "Collection already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "collections"
        ],
        "summary": "List all collections",
        "description": "Returns a summary of all your collections. The collections are returned sorted by creation date, with the most recent collections appearing first.",
        "operationId": "getCollections",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all collections",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collection"
              }
            }
          }
        }
      }
    },
    "/collections/{collectionName}": {
      "get": {
        "tags": [
          "collections"
        ],
        "summary": "Retrieve a single collection",
        "description": "Retrieve the details of a collection, given its name.",
        "operationId": "getCollection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "description": "The name of the collection to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection fetched",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "404": {
            "description": "Collection not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "collections"
        ],
        "summary": "Delete a collection",
        "description": "Permanently drops a collection. This action cannot be done. For large collections, this might have an impact on read latencies.",
        "operationId": "deleteCollection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "description": "The name of the collection to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection deleted",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "404": {
            "description": "Collection not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/collections/{collectionName}/documents": {
      "post": {
        "tags": [
          "documents"
        ],
        "summary": "Index a document",
        "description": "A document to be indexed in a given collection must conform to the schema of the collection.",
        "operationId": "indexDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "description": "The name of the collection to add the document to",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "document",
            "description": "A hash containing the document to be indexed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Document successfully created/indexed",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "404": {
            "description": "Collection not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/collections/{collectionName}/documents/{documentId}": {
      "get": {
        "tags": [
          "documents"
        ],
        "summary": "Retreive a document",
        "description": "Fetch an individual document from a collection by using its ID.",
        "operationId": "getDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "description": "The name of the collection to search for the document under",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "documentId",
            "description": "The Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The document referenced by the ID",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "404": {
            "description": "The document or collection was not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "documents"
        ],
        "summary": "Delete a document",
        "description": "Delete an individual document from a collection by using its ID.",
        "operationId": "deleteDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "description": "The name of the collection to search for the document under",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "documentId",
            "description": "The Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The document referenced by the ID was deleted",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "404": {
            "description": "The document or collection was not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/collections/{collectionName}/documents/search": {
      "get": {
        "tags": [
          "documents"
        ],
        "summary": "Search for documents in a collection",
        "description": "Search for documents in a collection that match the search criteria.",
        "operationId": "searchCollection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "description": "The name of the collection to search for the document under",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "q",
            "description": "The search query",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "query_by",
            "description": "A list of `string` or `string[]` fields that should be queried against. Separate multiple fields with a comma.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter_by",
            "description": "Filter conditions for refining your search results. Separate multiple conditions with &&.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort_by",
            "description": "A list of numerical fields and their corresponding sort orders that will be used for ordering your results. Separate multiple fields with a comma. Currently, upto 2 sort fields can be specified.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "facet_by",
            "description": "A list of fields that will be used for faceting your results on. Separate multiple fields with a comma.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "num_typos",
            "description": "The number of typographical errors (1 or 2) that would be tolerated. Default: 2",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "prefix",
            "description": "Boolean field to indicate that the last word in the query should be treated as a prefix, and not as a whole word. This is used for building autocomplete and instant search interfaces.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "rank_tokens_by",
            "description": "When a token/word in the search query matches multiple possible words (either because of a typo or during prefix search), this parameter determines the priority of the matching tokens. \nFor e.g. both “john” and “joan” are 1-typo away from “jofn”. In a prefix search, both “apple” and “apply” would match “app”. \nThe value of rank_tokens_by must be: TOKEN_RANKING_FIELD or TERM_FREQUENCY. \nTOKEN_RANKING_FIELD: Tokens are ranked by the value of the token_ranking_field specified during collection creation. \nTERM_FREQUENCY: Tokens that occur more frequently in the collection are ranked first.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Results from this specific page number would be fetched.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to fetch per page.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "callback",
            "description": "Name of the callback function to be used for JSONP response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "schema": {
              "type": "object",
              "properties": {
                "facet_counts": {
                  "type": "array",
                  "description": "todo",
                  "items": {
                    "type": "integer"
                  },
                  "example": []
                },
                "found": {
                  "type": "integer",
                  "description": "The number of documents found"
                },
                "search_time_ms": {
                  "type": "integer",
                  "description": "The number of milliseconds the search took"
                },
                "page": {
                  "type": "integer",
                  "description": "The search result page number"
                },
                "hits": {
                  "type": "array",
                  "description": "The documents that matched the search query",
                  "items": {
                    "$ref": "#/definitions/SearchResultHit"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, see error message for details",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "The collection or field was not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/collections/{collectionName}/documents/export": {
      "get": {
        "tags": [
          "documents"
        ],
        "summary": "Export all documents in a collection",
        "description": "Export all documents in a collection in JSON lines format.",
        "operationId": "exportCollection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "description": "The name of the collection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The document referenced by the ID",
            "schema": {
              "type": "string",
              "example": "{\"id\": \"124\", \"company_name\": \"Stark Industries\", \"num_employees\": 5215, \"country\": \"US\"}\n{\"id\": \"125\", \"company_name\": \"Future Technology\", \"num_employees\": 1232,\"country\": \"UK\"}\n{\"id\": \"126\", \"company_name\": \"Random Corp.\", \"num_employees\": 531,\"country\": \"AU\"}\n"
            }
          },
          "404": {
            "description": "The document was not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "api_key_header": []
    }
  ],
  "securityDefinitions": {
    "api_key_header": {
      "type": "apiKey",
      "name": "X-TYPESENSE-API-KEY",
      "in": "header"
    }
  },
  "definitions": {
    "Collection": {
      "type": "object",
      "required": [
        "name",
        "fields"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "companies"
        },
        "num_documents": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "example": [
            {
              "name": "company_name",
              "type": "string",
              "facet": false
            },
            {
              "name": "num_employees",
              "type": "int32",
              "facet": false
            },
            {
              "name": "country",
              "type": "string",
              "facet": true
            }
          ]
        },
        "token_ranking_field": {
          "type": "string",
          "example": "num_employees"
        }
      }
    },
    "Field": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "company_name"
        },
        "type": {
          "type": "string",
          "example": "string",
          "enum": [
            "string",
            "int32",
            "int64",
            "float",
            "bool"
          ]
        },
        "facet": {
          "type": "boolean",
          "default": false,
          "example": false
        }
      }
    },
    "Document": {
      "type": "object",
      "description": "Can be any key-value pair",
      "additionalProperties": {
        "type": "string"
      },
      "example": {
        "id": "124",
        "company_name": "Stark Industries",
        "num_employees": 5215,
        "country": "USA"
      }
    },
    "SearchResultHit": {
      "type": "object",
      "properties": {
        "_highlight": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Contains highlighted portions of the search fields"
        },
        "document": {
          "$ref": "#/definitions/Document"
        }
      },
      "example": {
        "_highlight": {
          "company_name": "<mark>Stark</mark> Industries"
        },
        "document": {
          "id": "124",
          "company_name": "Stark Industries",
          "num_employees": 5215,
          "country": "USA"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Typsesense",
    "url": "http://wreally.com/typesense-docs-0.7/"
  }
}